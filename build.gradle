buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
  id 'com.gradle.build-scan' version '1.15.1'
}

// Use gradle scan plugin and service
buildScan {
 termsOfServiceUrl = 'https://gradle.com/terms-of-service'
 termsOfServiceAgree = 'yes'
 publishOnFailure()
}

apply plugin: 'eclipse'

subprojects {

  group = 'saros'
  version = '1.0'

  apply plugin: 'eclipse'

  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'osgi'

  repositories {
    maven { url 'https://raw.githubusercontent.com/maven-eclipse/swt-repo/master' }
    maven { url 'https://maven.atlassian.com/3rdparty/' }
    mavenCentral()
  }

  configurations {
    testing
    testConfig
    releaseDep

    releaseDep.transitive = false
  }

  test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
  }

  dependencies {
    compile 'log4j:log4j:1.2.17'

    testConfig 'junit:junit:4.11'
    testConfig 'org.easymock:easymock:3.1'
    testConfig 'org.powermock:powermock-easymock-release-full:1.5.1'
    testConfig 'org.objenesis:objenesis:1.2'
    testConfig 'org.javassist:javassist:3.18.0-GA'
    testConfig 'cglib:cglib-nodep:2.2.2'
  }
  it.ext.eclipsePluginDir = project.hasProperty('eclipsePluginDir') ? eclipsePluginDir  : '/'
  it.ext.intellijLibDir = project.hasProperty('intellijLibDir') ? intellijLibDir  : '/'
}

task clean(dependsOn: subprojects*.name.collect{":$it:clean"})

